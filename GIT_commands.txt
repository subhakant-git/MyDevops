version control using GIT
=========================
git init -> to create a local repo for the directory
a .git folder will be created which is a hidden file

git config --global user.name subha001
git config --global user.email subha@gmail.com

git config --list

git config --global --unset user.name

git status -> gives the file details
git add .  -> adds all the files to staging

git commit -m "message"  -> the file will be commited to the local repo
git ls-files -> gives the files which are commited to repo

git commit -a -m "meaasge"  -> this is used to commit the changes to an already commited file

git diff "filename" -> shows the changes/history

git restore "filenme" -> reverts the file back to the previous format (if the file is in working directory)

git diff --staged "filename"  -> shows the changes made to the file which is staged already
git restore --staged "filename" -> takes the file back to working directory
git restore "filename"  -> to restore the file

git rm "filename" -> remove the file from local repo and working directory
git status  -> git will track the file
git commit -m "message" -> to commit the deleted file

git log --oneline  -> to get a formated log details

git revert <commitId>

Reset methods
=============
hard, soft, mixed

git reset --soft <commitid>  -> this commit is the HEAD now, all other commits till that will be moved to staging

git reset --mixed <commitid>  -> this commit is the HEAD now, all other commits till that will be moved to working directory

git reset --hard <commitid>  -> this commit is the HEAD now, all other commits till that will be removed permanently (not suggested)


Branching and merging
=====================
default is master branch when the code is commited for the first time

git branch -> shows the brach
git branch dev   -> creates a new branch called dev
git checkout dev -> switches to dev branch

git merge dev master -> merges the changes from dev to master

git branch -m dev development  -> renames the branch name

git branch -d dev -> delete the branch

git reflog -> all the logs we can see

git checkout -b <branch_name> <refid>    -> we can bring back the deleted branch

git rebase vs git merge
=======================
git rebase will give the structured history (mostly required for the local brances)
git merge will merge the branches (ideal in most scenarios)
git rebase is always done on the feature branch. Not in master branch
git rebase master (rebase the changes from master)

Rebase Example
==============
master branch has 2 commits 1,2,3,4
feature branch has 2 new commits, 1,2,5,6

git rebase feature -> 1,2,3,4,5,6
git merge feature master -> 1,2,5,6,3,4

stashing 
========
saving the changes temporarily in the local repo or in any branch
git stash (moves the changes into some tepmorary memory and store it in an array)
git stash list (lists the changes stored) stash@{0)
git show stash@{0}
git stash pop stash@{0} (stash gets deleted and changes are back to the file)

git stash clear - discards/deletes all the changes.

where the stash content get stored (.git/ref)

git stash -p (interactive mode) git asks for every file whether to stash or not ? with options like y,n,a,q etc

git stash --all-untracked  (used to stash the newly created files)

conflict management
===================
when we have 2 files in different branches with different content
open the file where the conflict happens (vim filename)

do changes manually, remove all special characters. Save the file
now do a commit

creating github repo and connect to local repository
====================================================
git remote add origin https://github.com/subhakant-git/myproject-26April.git   (origin is the remote repo. it can be any name)

git remote -v 

https://github.com/settings/tokens (to generate the token in web browser)

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

git push origin master
username -> enter the token
password -> blank

git pull origin master
git push origin master

Forking (synchronization and collaboration)
===========================================
take someone else's repo link
click on "new fork"

cloning in github
=================
copying the repo from remote to local


sonarcloud token
================
4487273956a9c0b9670e3008e285da9459901b47

snyk token
==========
9d682f28-358d-47bd-8e8c-7abce56bfeeb








